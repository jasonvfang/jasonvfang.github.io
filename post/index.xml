<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog.HAOYI - A coder&#39;s blog</title>
    <link>https://blog.haoyi.dev/post/</link>
    <description>Recent content in Posts on Blog.HAOYI - A coder&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Oct 2021 17:18:51 +0800</lastBuildDate><atom:link href="https://blog.haoyi.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SnmpTrap</title>
      <link>https://blog.haoyi.dev/post/snmp_trap/</link>
      <pubDate>Fri, 22 Oct 2021 17:18:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/snmp_trap/</guid>
      <description>snmp网管协议较为古老，但是在服务运维界却用的比较多，这里总结snmptrap的测试步骤。
   测试主要依赖的工具  ubuntu 16.04, dnsmasq，snmptrapd
   操作步骤  首先在ubuntu上搭建snmptrapd接收Server应用，用于trap消息的接收，直接通过apt install的方式即可。
其次，修改配置文件/etc/snmp/snmptrapd.conf： 配置好后可以在命令行上启用：
sudo snmptrapd -C -c /etc/snmp/snmptrapd.conf -f -Lo   关于snmp应用  目前大部分用的是net-snmp，基于此应用程序作的二次开发，加入自定义的MIB，如何移植资料很丰富，本文不讨论。
正常接收到的IPv4 Trap消息，如下图示：    使用dns域名作为Trap地址  可参考dnsmasq的设置，开启自定义DNS域名： 可以看到图上配置了两个不同的域名，一个是IPv4地址，另一个是IPv6地址。
   IPv6 Trap消息的接收问题  测试发现发送的Trap没有被Snmptrap端收到，而网络又是互通的，如下图示： 上图可以看出发送snmptrap后，目的地址响应的Port Unreachable，说明snmptrapd没有开启UDP6的端口监听，需要在目的服务器上将snmptrapd开启IPv6监听，方法如下： 修改/etc/snmp/snmptrapd.conf，加入一行：snmpTrapdAddr udp:162,udp6:162，保存退出并重启snmptrapd服务： 进一步确认snmptrapd正常监听IPv6的协议端口162，如下图示： 重新测试可以看到，在snmptrapd这边有正常的UDP6消息输出： </description>
    </item>
    
    <item>
      <title>Upgrade gcc on Ubuntu 16.04</title>
      <link>https://blog.haoyi.dev/post/fix_ubuntu_gcc_upgrade_err/</link>
      <pubDate>Sun, 26 Sep 2021 17:32:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/fix_ubuntu_gcc_upgrade_err/</guid>
      <description>Setup apt source  sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update sudo apt-get install gcc-snapshot sudo apt-get install gcc-7 g++-7    Change default gcc symbol link  get into /usr/bin/ and recreate symbol links to gcc-7.
   The issue you may get during apt source setup  Traceback (most recent call last): File &amp;quot;/usr/bin/apt-listchanges&amp;quot;, line 28, in &amp;lt;module&amp;gt; import apt_pkg ImportError: No module named apt_pkg If you see an error like above, Then you may need workaround this:</description>
    </item>
    
    <item>
      <title>Markdown转换为PDF文件</title>
      <link>https://blog.haoyi.dev/post/md_to_pdf/</link>
      <pubDate>Thu, 02 Sep 2021 00:07:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/md_to_pdf/</guid>
      <description>   在VS Code中安装Markdown PDF插件：     通过VS code打开MD文件，并右键选择Markdown export to PDF  </description>
    </item>
    
    <item>
      <title>WebSite配置笔记</title>
      <link>https://blog.haoyi.dev/post/how_the_site_setup/</link>
      <pubDate>Mon, 16 Aug 2021 00:07:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/how_the_site_setup/</guid>
      <description>   如何使用VS Code编辑Markdown以及Preview  打开VSCode，按快捷键CTRL+SHIFT+P，在弹出的窗口中输出Markdown，此时会出现Preview选项： 由此，后续blog文档的输出均采用VSCode编写。
   Hugo生成器版本  ~$ hugo version hugo v0.87.0-B0C541E4+extended linux/amd64 BuildDate=2021-08-03T10:57:28Z VendorInfo=gohugoio    主题  来回尝试了多个主题，发现hugo-tania这个很简洁，并且默认支持了评论功能，非常方便，另外，很非常喜欢它这种清爽的风格，果断采用。
   配置文件  采用config.toml的方式进行配置，主要配置参考这里。
   修改评论功能  tania主题默认是采用Discuz，不太简洁，因而改用轻量级的utterances，这是由github官方支持的开源、免费评论插件，如何使用？主要有以下三点：
 一是要安装这个功能（需要登录github然后按指导安装即可） 其次是配置utterances， repo针对的是你要使用的github repo，一般填网站的github repo就行，注意要带用户前缀：xxxx/xxxx 三是针对具体的主题进行修改，这里的tania需要放到layouts/partials/comments/provider/utterances.html，utterances.html的内容就是utterances配置完后生成的脚本，例如：  &amp;lt;script src=&amp;quot;https://utteranc.es/client.js&amp;quot; repo=&amp;quot;jasonvfang.github.io&amp;quot; issue-term=&amp;quot;pathname&amp;quot; theme=&amp;quot;boxy-light&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot; async&amp;gt; &amp;lt;/script&amp;gt;  最后一步，修改config.toml，将provider = &amp;ldquo;utterances&amp;quot;置上即可  </description>
    </item>
    
    <item>
      <title>Hugo启用自定义IP绑定</title>
      <link>https://blog.haoyi.dev/post/start_server_with_ip/</link>
      <pubDate>Thu, 12 Aug 2021 13:32:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/start_server_with_ip/</guid>
      <description>默认hugo启用server时会绑定在localhost(127.0.0.1)上，在外网上无法通过IP访问，只能通过本机输入localhost访问， 那么如何启用Server可用于IP访问：
 hugo server -b http://10.240.218.181 --bind=&amp;quot;0.0.0.0&amp;quot; -D </description>
    </item>
    
    <item>
      <title>Linux 命令行参数处理</title>
      <link>https://blog.haoyi.dev/post/getopt_usage/</link>
      <pubDate>Sun, 05 Aug 2018 13:32:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/getopt_usage/</guid>
      <description>&lt;p&gt;前几天遇到对不同情况下，有个命令的处理条件需要区别的任务，看了下原始的代码，发现难以改动，太多的HARD CODE了，直接使用argv[i]的方式获取参数值显得特别
不好修改，于是想到Linux下有专门的getopt方法，好在不算改动特别大，对以前的做法作了兼容处理，好吧，这里还是对getopt作个简要的整理吧，方便日后回顾。&lt;/p&gt;
&lt;h3 id=&#34;简要说明&#34;&gt;
    &lt;a href=&#34;#%e7%ae%80%e8%a6%81%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    简要说明
&lt;/h3&gt;
&lt;p&gt;getopt/getopt_long都是linux平台下为应用程序提供处理命令行参数的接口，区别在于后者有参数名称长度较长的情况，一般在Linux下的命令行参数以横框“-”或者双横杠
“&amp;ndash;”进行传递，比如我们经常用到的ls -l 或者 ls &amp;ndash;help ，其中的l和help为选项。&lt;/p&gt;
&lt;h3 id=&#34;如何在程序中使用&#34;&gt;
    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%9c%a8%e7%a8%8b%e5%ba%8f%e4%b8%ad%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;
        &lt;svg class=&#34;icon&#34; aria-hidden=&#34;true&#34; focusable=&#34;false&#34; height=&#34;16&#34; version=&#34;1.1&#34; viewBox=&#34;0 0 16 16&#34; width=&#34;16&#34;&gt;
            &lt;path fill-rule=&#34;evenodd&#34;
                d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    如何在程序中使用
&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>Linux FD操作问题</title>
      <link>https://blog.haoyi.dev/post/open_fd_question/</link>
      <pubDate>Wed, 18 Jul 2018 00:10:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/open_fd_question/</guid>
      <description>主要总结一之前工作中遇到的问题，在对一个fifo进行操作的时候出现无法open的情况，但是fifo文件是一直存在的，百思不得解， 后面还是同事的提醒，才想起看到man手册中的说明，先上代码吧，自己写的一个小程序测试： 注意这里的模式是只写模式加非阻塞模式,运行结果是： MAN手册上的说明：    总结：  使用O_RDONLY或O_WRONLY设置打开FIFO时:
 如果设置了O_NONBLOCK，则open()用于读取时只会立即返回。如果当前没有任何进程打开文件进行读取，则以只写的方式写FD时会返回一个错误。 如果O_NONBLOCK没有指定，那么只读的open()将阻塞调用线程，直到线程打开文件进行写入。以只写方式open()调用将会阻塞调用线程，直到线程打开文件进行读取。  因此本例中的解决办法：
 1.可以设置open的方式为block方式  在write之前，其他进程一直在读fd    </description>
    </item>
    
    <item>
      <title>cmake学习简要总结</title>
      <link>https://blog.haoyi.dev/post/cmake_summary/</link>
      <pubDate>Sun, 15 Jul 2018 23:10:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/cmake_summary/</guid>
      <description>&lt;p&gt;今天有时间去研究一下cmake的使用，之前一直是想看一下的，只是时间没排出来，今天总算排上了，收获也挺多，感觉
这样的编译工具确实比我们自己写Makefile管理起来要好的多，这也就是为什么在开源社区会有这么多的开源软件的编译都采用的cmake吧。&lt;/p&gt;
&lt;p&gt;不废话了，今天按照官方文档把整个例子跑了一遍，基本上知道如何使用了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo summary length 限制</title>
      <link>https://blog.haoyi.dev/post/hugo_summary_len/</link>
      <pubDate>Sun, 24 Jun 2018 16:10:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/hugo_summary_len/</guid>
      <description>&lt;p&gt;本文将说明如何在HUGO中对摘要进行长度限制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Libcurl中的HTTP重定向问题</title>
      <link>https://blog.haoyi.dev/post/libcurl_redirect_sum/</link>
      <pubDate>Sat, 23 Jun 2018 12:10:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/libcurl_redirect_sum/</guid>
      <description>&lt;p&gt;最近一调试AMAZON的Prime Music音源接口，主要是HTTP POST/GET这种方法获取的JSON结果进行解析，工作内容相对比较简单，但是需要注意的地方比较多：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何判断单链表有环</title>
      <link>https://blog.haoyi.dev/post/howto_judge_linklist_cycle/</link>
      <pubDate>Mon, 21 Nov 2016 17:22:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/post/howto_judge_linklist_cycle/</guid>
      <description>从自己的CSDN BLOG移过来的文章，作个BACKUP:
   1、对于单链表而言，只有通过从头到尾的遍历方式，如果发现尾指针指向头指针则说明有环：  bool hasCycle(struct ListNode *head){if(head == NULL || head-&amp;gt;next == NULL){return false;}struct ListNode *ptr = head-&amp;gt;next;while(ptr){if (ptr-&amp;gt;next == head){return true;}	if (ptr-&amp;gt;next == NULL)break;ptr = ptr-&amp;gt;next;	}return false;}   2、使用双指针，一个遍历的速度快，一个较慢，如果快的指针追上了慢的那个说明有环：  /*** Definition for singly-linked list.* struct ListNode {* int val;* struct ListNode *next;* };*/bool hasCycle(struct ListNode *head) {struct ListNode *faster = NULL;struct ListNode *slower = NULL;if(head == NULL || head-&amp;gt;next == NULL){return false;}slower = head;faster = head-&amp;gt;next;while(faster !</description>
    </item>
    
  </channel>
</rss>
