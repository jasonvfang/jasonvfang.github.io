<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Blog.Haoyi</title>
    <link>https://blog.haoyi.dev/tags/algorithm/</link>
    <description>Recent content in algorithm on Blog.Haoyi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Nov 2016 17:22:51 +0800</lastBuildDate><atom:link href="https://blog.haoyi.dev/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何判断单链表有环</title>
      <link>https://blog.haoyi.dev/2016/11/21/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%8D%95%E9%93%BE%E8%A1%A8%E6%9C%89%E7%8E%AF/</link>
      <pubDate>Mon, 21 Nov 2016 17:22:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/2016/11/21/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%8D%95%E9%93%BE%E8%A1%A8%E6%9C%89%E7%8E%AF/</guid>
      <description>从自己的CSDN BLOG移过来的文章，作个BACKUP:
1、对于单链表而言，只有通过从头到尾的遍历方式，如果发现尾指针指向头指针则说明有环： bool hasCycle(struct ListNode *head){if(head == NULL || head-&amp;gt;next == NULL){return false;}struct ListNode *ptr = head-&amp;gt;next;while(ptr){if (ptr-&amp;gt;next == head){return true;}	if (ptr-&amp;gt;next == NULL)break;ptr = ptr-&amp;gt;next;	}return false;}2、使用双指针，一个遍历的速度快，一个较慢，如果快的指针追上了慢的那个说明有环： /*** Definition for singly-linked list.* struct ListNode {* int val;* struct ListNode *next;* };*/bool hasCycle(struct ListNode *head) {struct ListNode *faster = NULL;struct ListNode *slower = NULL;if(head == NULL || head-&amp;gt;next == NULL){return false;}slower = head;faster = head-&amp;gt;next;while(faster !</description>
    </item>
    
  </channel>
</rss>
