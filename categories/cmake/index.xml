<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cmake on Blog.Haoyi.DEV</title>
    <link>https://blog.haoyi.dev/categories/cmake/</link>
    <description>Recent content in Cmake on Blog.Haoyi.DEV</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 15 Jul 2018 23:10:51 +0800</lastBuildDate>
    <atom:link href="https://blog.haoyi.dev/categories/cmake/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>cmake学习简要总结</title>
      <link>https://blog.haoyi.dev/2018/07/15/cmake%E5%AD%A6%E4%B9%A0%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93</link>
      <pubDate>Sun, 15 Jul 2018 23:10:51 +0800</pubDate>
      
      <guid>https://blog.haoyi.dev/2018/07/15/cmake%E5%AD%A6%E4%B9%A0%E7%AE%80%E8%A6%81%E6%80%BB%E7%BB%93</guid>
      <description>

&lt;p&gt;今天有时间去研究一下cmake的使用，之前一直是想看一下的，只是时间没排出来，今天总算排上了，收获也挺多，感觉
这样的编译工具确实比我们自己写Makefile管理起来要好的多，这也就是为什么在开源社区会有这么多的开源软件的编译都采用的cmake吧。&lt;/p&gt;

&lt;p&gt;不废话了，今天按照官方文档把整个例子跑了一遍，基本上知道如何使用了。&lt;/p&gt;

&lt;h4 id=&#34;大致总结一下吧:578a5a155bc08a6ef951443a54099335&#34;&gt;大致总结一下吧：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cmake根据CMakeLists.txt文件自动生成Makefile
也就是cmake是可配置的，其次它有一个方便的GUI工具实现配置，这个我暂时没有研究到。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cmake可指定宏编译选项、子目录、install、目标&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用的也应该就这些，理解这些大致修改足够了：&lt;/p&gt;

&lt;p&gt;宏：option()
子目录：
头文件子目录：include_directories  编译子目录：add_subdirectory&lt;/p&gt;

&lt;p&gt;install: install()可指定FILES或者TARGETS&lt;/p&gt;

&lt;p&gt;add_executable():指定生成的target及需要的src文件&lt;/p&gt;

&lt;p&gt;target_link_libraries：指定链接的lib&lt;/p&gt;

&lt;p&gt;这里是官方文档中的一个例子，写的很清楚了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake_minimum_required (VERSION 2.6)
project (Tutorial)
# The version number.
set (Tutorial_VERSION_MAJOR 1)
set (Tutorial_VERSION_MINOR 0)

 # should we use our own math functions?
option (USE_MYMATH 
        &amp;quot;Use tutorial provided math implementation&amp;quot; ON) 
        
# configure a header file to pass some of the CMake settings
# to the source code
configure_file (
  &amp;quot;${PROJECT_SOURCE_DIR}/TutorialConfig.h.in&amp;quot;
  &amp;quot;${PROJECT_BINARY_DIR}/TutorialConfig.h&amp;quot;
  )
 
# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
include_directories(&amp;quot;${PROJECT_BINARY_DIR}&amp;quot;)
 
# add the MathFunctions library?
#
if (USE_MYMATH)
  include_directories (&amp;quot;${PROJECT_SOURCE_DIR}/MathFunctions&amp;quot;)
  add_subdirectory (MathFunctions)
  set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)
endif (USE_MYMATH)

     
# add the executable
add_executable (Tutorial tutorial.cxx)
target_link_libraries (Tutorial  ${EXTRA_LIBS})

# add the install targets
install (TARGETS Tutorial DESTINATION ~/bin)
install (FILES &amp;quot;${PROJECT_BINARY_DIR}/TutorialConfig.h&amp;quot;        
         DESTINATION ~/include)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在github中已经把这些步骤的尝试都上传了，可见&lt;a href=&#34;https://github.com/jasonvfang/cmake-examples&#34;&gt;这里&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;参考详细教程：&lt;a href=&#34;https://cmake.org/cmake-tutorial/&#34;&gt;https://cmake.org/cmake-tutorial/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>